##############################################################
#
# This file contains general variable definitions used by the PinTools makefiles.
# See makefile.unix.config for an explanation of each variable defined in this file.
#
##############################################################

###### Architecture ######

# Identify the architecture of the host
ifndef HOST_ARCH
    HST := $(shell uname -m)
    ifeq ($(HST),x86)
        HOST_ARCH := ia32
    endif
    ifeq ($(HST),i386)
        HOST_ARCH := ia32
    endif
    ifeq ($(HST),i686)
        HOST_ARCH := ia32
    endif
    ifeq ($(HST),x86_64)
        HOST_ARCH := intel64
    endif
    ifeq ($(HST),amd64)
        HOST_ARCH := intel64
    endif
    ifeq ($(HST),k1om)
        HOST_ARCH := mic
    endif

    # Verify known host
    ifndef HOST_ARCH
        $(error Could not detect the host architecture. Please define HOST_ARCH from the command line.)
    endif
endif

# Define the architecture of the target
TARGET := $(HOST_ARCH)
ifeq ($(TARGET),ia32)
    BITS := 32
else
    BITS := 64
endif

# Define the output directory
OBJDIR := obj-$(TARGET)/

###### Operating system ###### 

# Identify the operating system
ifndef TARGET_OS
    OS := $(shell uname -s)
    ifeq ($(OS),Darwin)
        TARGET_OS := mac
    endif
    ifeq ($(OS),Linux)
        TARGET_OS := linux
    endif
endif

# Verify known operating system
ifndef TARGET_OS
    $(error Could not identify the host operating system. Please define TARGET_OS from the command line.)
endif

# Define the general OS type
OS_TYPE := unix

###### Program definitions ######

# COMPILER may have already been defined during the build so don't override it with the hardcoded defaults below.
ifeq ($(TARGET),mic)
    COMPILER ?= icc
endif
ifdef ICCPIN
    COMPILER ?= icc
endif
ifeq ($(TARGET_OS),mac)
    COMPILER ?= clang
endif
COMPILER ?= gcc

ifeq ($(ICC),1)
    # This makefile assumes that the iccvars script has been run. So if the user didn't
    # specify a full path to CC and CXX, we override them now and let the PATH set by the
    # iccvars script to find the appropriate compiler.
    ifeq ($(origin CC), default)
        CC := icc
        CXX := icpc
    endif
endif

# If the native compiler and binutils are too new, we must link the tools with older
# versions of binutils to test tools in probe mode. To do that we put their directory
# in the front of the PATH environment variable.
ifdef BINUTILS_PATH
    LINKER := env PATH=$(BINUTILS_PATH):$(PATH) $(CXX)
else
    LINKER := $(CXX)
endif

ARCHIVER := /usr/bin/ar cr 

ifeq ($(TARGET_OS),mac)
    ASMBLR := $(CXX)
else
    ASMBLR := $(CC)
endif

###### File extensions ######

EXE_SUFFIX :=
OBJ_SUFFIX := .o
DLL_SUFFIX := .so
ifeq ($(TARGET_OS),mac)
    # Mac has a different suffix for dlls, so override DLL_SUFFIX.
    DLL_SUFFIX := .dylib
endif
PINTOOL_SUFFIX := $(DLL_SUFFIX)
SATOOL_SUFFIX :=
LIB_SUFFIX := .a
ASM_SUFFIX := .s
DLL_PREFIX := lib

###### Additional utilities ######

RM := $(CMD_PREFIX) rm
PYTHON := $(CMD_PREFIX) python
DIFF := $(CMD_PREFIX) diff -w
# Mac has a different compare program.
# It is overridden in makefile.unix.config since it depends on TOOLS_ROOT which is defined in that file.
CMP := $(CMD_PREFIX) cmp
CMD :=
GREP := $(CMD_PREFIX) grep
QGREP := $(CMD_PREFIX) grep -q
CGREP := $(CMD_PREFIX) grep -c
LINECOUNT := $(CMD_PREFIX) wc -l
BASHTEST := $(CMD_PREFIX) test
TOUCH := $(CMD_PREFIX) touch
STRIP := /usr/bin/strip
SET_DLL_PATH := export LD_LIBRARY_PATH=$(OBJDIR);
SORT := $(CMD_PREFIX) sort

